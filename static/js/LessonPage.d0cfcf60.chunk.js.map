{"version":3,"file":"static/js/LessonPage.d0cfcf60.chunk.js","mappings":"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","sources":["components/ScrollTopButton/ScrollTopButton.styled.ts","components/ScrollTopButton/ScrollTopButton.tsx","helpers/formatHelper.ts","helpers/scrollHelper.ts","views/LessonPage/LessonPage.styled.ts","views/LessonPage/LessonPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { colors } from 'utils/colors';\nimport { secondary } from 'utils/breakpoints';\n\nconst { accent } = colors;\nconst { desktop } = secondary;\n\nconst ButtonStyles = styled.div`\n  position: fixed;\n  right: 30px;\n  bottom: 50px;\n  color: ${accent};\n  font-size: 3rem;\n  cursor: pointer;\n  z-index: 1;\n\n  @media screen and (min-width: ${desktop}px) {\n    right: 50px;\n  }\n`;\n\nexport { ButtonStyles };\n","import { useEffect, useState } from 'react';\nimport { BsArrowUpSquareFill } from 'react-icons/bs';\nimport { handleScrollToTop } from 'helpers/scrollHelper';\nimport { ButtonStyles } from 'components/ScrollTopButton/ScrollTopButton.styled';\n\nconst ScrollTopButton = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const handleVisibility = () => {\n      const scroll = document.documentElement.scrollTop;\n\n      if (scroll > 300) {\n        setIsVisible(true);\n      }\n\n      if (scroll <= 300) {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleVisibility);\n\n    return () => {\n      window.removeEventListener('scroll', handleVisibility);\n    };\n  }, []);\n\n  return (\n    <ButtonStyles>\n      <BsArrowUpSquareFill\n        onClick={handleScrollToTop}\n        style={{ display: isVisible ? 'inline' : 'none' }}\n      />\n    </ButtonStyles>\n  );\n};\n\nexport default ScrollTopButton;\n","import Hls from 'hls.js';\n\nconst handleElementFormat = (element, sourceLink) => {\n  const hls = new Hls();\n  hls.loadSource(sourceLink);\n  hls.attachMedia(element);\n};\n\nexport { handleElementFormat };\n","const handleScrollToTop = () => {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n};\n\nconst handleScrollToElement = element => {\n  element?.scrollIntoView({ behavior: 'smooth' });\n};\n\nexport { handleScrollToTop, handleScrollToElement };\n","import styled from 'styled-components';\nimport { colors } from 'utils/colors';\n\nconst { main } = colors;\n\nconst ImageContainerStyles = styled.div`\n  width: 100%;\n  height: 550px;\n  margin-bottom: 20px;\n`;\n\nconst TitleStyles = styled.h3`\n  margin: 0 0 20px;\n  text-align: center;\n  font-size: 30px;\n`;\n\nconst TextStyles = styled.p`\n  margin: 0 0 15px 0;\n  text-align: center;\n  color: ${main};\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport { ImageContainerStyles, TitleStyles, TextStyles };\n","import { useEffect, useContext, useState, useRef } from 'react';\nimport Error from 'components/Error';\nimport ScrollTopButton from 'components/ScrollTopButton';\nimport video_unavailable from 'images/video_unavailable.png';\nimport { HLS_IS_SUPPORTED } from 'helpers/constants';\nimport { handleElementFormat } from 'helpers/formatHelper';\nimport { handleScrollToElement } from 'helpers/scrollHelper';\nimport { IDLE, RESOLVED, REJECTED } from 'helpers/constants';\nimport { LessonContext } from 'context/LessonContextProvider';\nimport {\n  TitleStyles,\n  TextStyles,\n  ImageContainerStyles,\n} from 'views/LessonPage/LessonPage.styled';\n\nconst LessonPage = () => {\n  const { lesson } = useContext(LessonContext);\n  const [status, setStatus] = useState(IDLE);\n  const [lessonLink, setLessonLink] = useState<string | undefined>(undefined);\n  const [lessonDuration, setLessonDuration] = useState<number | undefined>(\n    undefined,\n  );\n  const [video, setVideo] = useState<HTMLMediaElement>();\n  const [currentTime, setCurrentTime] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('time')!) ?? [];\n  });\n  const [isPlay, setIsPlay] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const titleRef = useRef<HTMLHeadingElement>(null);\n\n  useEffect(() => {\n    if (lesson) {\n      setStatus(RESOLVED);\n      setLessonLink(lesson?.link);\n      setLessonDuration(lesson?.duration);\n    }\n  }, [lesson]);\n\n  useEffect(() => {\n    const title = titleRef.current;\n\n    if (title) {\n      handleScrollToElement(title);\n    }\n\n    if (HLS_IS_SUPPORTED && lessonLink) {\n      const video = videoRef.current as HTMLMediaElement;\n\n      if (video) {\n        setVideo(video);\n        handleElementFormat(video, lessonLink);\n      }\n    }\n  }, [lessonLink]);\n\n  useEffect(() => {\n    if (currentTime.length > 0 && !isPlay) {\n      window.localStorage.setItem('time', JSON.stringify(currentTime));\n    }\n  }, [currentTime, isPlay]);\n\n  const handleVideoTimeUpdate = () => {\n    if (video) {\n      if (!video.paused) {\n        video.addEventListener('play', () => {\n          const currentEl = currentTime.find(({ id }) => id === video.id);\n\n          if (currentEl) {\n            video.currentTime = currentEl.time;\n          }\n        });\n\n        setIsPlay(true);\n        return;\n      }\n\n      const currentEl = currentTime.find(({ id }) => id === video.id);\n\n      if (!currentEl) {\n        setCurrentTime([\n          ...currentTime,\n          { id: video.id, time: video.currentTime },\n        ]);\n      } else {\n        currentTime.forEach(({ id, time }) => {\n          if (id === video.id && video.currentTime > 0) {\n            return (time = video.currentTime);\n          }\n        });\n      }\n      setIsPlay(false);\n    }\n  };\n\n  if (status === REJECTED) return <Error image={video_unavailable} />;\n\n  if (status === RESOLVED)\n    return (\n      <>\n        <TitleStyles ref={titleRef}>Lesson {lesson?.order}</TitleStyles>\n        <TextStyles>{lesson?.title}</TextStyles>\n        <ImageContainerStyles onTimeUpdate={handleVideoTimeUpdate}>\n          {lessonLink && lessonDuration ? (\n            <video ref={videoRef} width='100%' height='100%' controls />\n          ) : (\n            <img src={video_unavailable} alt='banner' />\n          )}\n        </ImageContainerStyles>\n        <ScrollTopButton />\n      </>\n    );\n\n  return <></>;\n};\n\nexport default LessonPage;\n"],"names":["accent","colors","desktop","secondary","ButtonStyles","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","isVisible","setIsVisible","useEffect","handleVisibility","scroll","document","documentElement","scrollTop","window","addEventListener","removeEventListener","_jsx","children","BsArrowUpSquareFill","onClick","handleScrollToTop","style","display","handleElementFormat","element","sourceLink","hls","Hls","loadSource","attachMedia","scrollTo","top","behavior","handleScrollToElement","scrollIntoView","main","ImageContainerStyles","TitleStyles","_templateObject2","TextStyles","_templateObject3","lesson","useContext","LessonContext","IDLE","status","setStatus","_useState3","undefined","_useState4","lessonLink","setLessonLink","_useState5","_useState6","lessonDuration","setLessonDuration","_useState7","_useState8","video","setVideo","_useState9","_JSON$parse","JSON","parse","localStorage","getItem","_useState10","currentTime","setCurrentTime","_useState11","_useState12","isPlay","setIsPlay","videoRef","useRef","titleRef","RESOLVED","link","duration","title","current","HLS_IS_SUPPORTED","length","setItem","stringify","REJECTED","Error","image","video_unavailable","_jsxs","_Fragment","ref","order","onTimeUpdate","paused","currentEl","find","_ref","id","time","_ref2","forEach","_ref3","concat","_toConsumableArray","width","height","controls","src","alt","ScrollTopButton"],"sourceRoot":""}