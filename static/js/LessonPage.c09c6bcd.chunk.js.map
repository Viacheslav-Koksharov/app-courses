{"version":3,"file":"static/js/LessonPage.c09c6bcd.chunk.js","mappings":"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","sources":["components/ScrollTopButton/ScrollTopButton.styled.ts","components/ScrollTopButton/ScrollTopButton.tsx","views/LessonPage/LessonPage.styled.ts","views/LessonPage/LessonPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { secondary } from '../../utils/breakpoints';\nimport { colors } from '../../utils/colors';\n\nconst ButtonS = styled.div`\n  position: fixed;\n  right: 30px;\n  bottom: 50px;\n  color: ${colors.accent};\n  font-size: 3rem;\n  cursor: pointer;\n  z-index: 1;\n\n  @media screen and (min-width: ${secondary.desktop}px) {\n    right: 50px;\n  }\n`;\n\nexport { ButtonS };\n","import { useState } from 'react';\nimport { BsArrowUpSquareFill } from 'react-icons/bs';\nimport { ButtonS } from './ScrollTopButton.styled';\n\nconst ScrollButton = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisible = () => {\n    const scrolled = document.documentElement.scrollTop;\n\n    if (scrolled > 300) {\n      setVisible(true);\n    } else if (scrolled <= 300) {\n      setVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  window.addEventListener('scroll', toggleVisible);\n\n  return (\n    <ButtonS>\n      <BsArrowUpSquareFill\n        onClick={scrollToTop}\n        style={{ display: visible ? 'inline' : 'none' }}\n      />\n    </ButtonS>\n  );\n};\n\nexport default ScrollButton;\n","import styled from 'styled-components';\nimport { colors } from '../../utils/colors';\n\nconst ImageContainerS = styled.div`\n  width: 100%;\n  height: 550px;\n  margin-bottom: 20px;\n`;\n\nconst TitleS = styled.h3`\n  margin: 0 0 20px;\n  text-align: center;\n  font-size: 30px;\n`;\n\nconst TextS = styled.p`\n  margin: 0 0 15px 0;\n  text-align: center;\n  color: ${colors.main};\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport { TitleS, TextS, ImageContainerS };\n","import Hls from 'hls.js';\nimport { useEffect, useContext, useState } from 'react';\nimport { LessonContext } from '../../context/LessonContextProvider';\nimport ScrollTopButton from '../../components/ScrollTopButton';\nimport video_unavailable from '../../images/video_unavailable.png';\nimport { TitleS, TextS, ImageContainerS } from './LessonPage.styled';\n\nconst LessonPage = () => {\n  const { lesson } = useContext(LessonContext);\n  const [video, setVideo] = useState<HTMLMediaElement>();\n  const [currentTime, setCurrentTime] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('time')!) ?? [];\n  });\n  const [isPlay, setIsPlay] = useState(false);\n\n  useEffect(() => {\n    if (window.Hls.isSupported() && lesson?.link) {\n      const video = document.getElementById(\n        `${lesson?.link}`,\n      ) as HTMLMediaElement;\n\n      setVideo(video);\n\n      var hls = new Hls();\n      hls.loadSource(lesson?.link);\n      hls.attachMedia(video);\n    }\n\n    scrollToVideo();\n  }, [lesson, lesson?.link]);\n\n  useEffect(() => {\n    if (currentTime.length > 0 && !isPlay) {\n      window.localStorage.setItem('time', JSON.stringify(currentTime));\n    }\n  }, [currentTime, isPlay]);\n\n  const getIsPlay = () => {\n    if (video) {\n      if (!video.paused) {\n        video.addEventListener('play', () => {\n          const currentEl = currentTime.find(item => item.id === video.id);\n          if (currentEl) {\n            video.currentTime = currentEl.time;\n          }\n        });\n\n        setIsPlay(true);\n        return;\n      }\n\n      const currentEl = currentTime.find(item => item.id === video.id);\n\n      if (!currentEl) {\n        setCurrentTime([\n          ...currentTime,\n          { id: video.id, time: video.currentTime },\n        ]);\n      } else {\n        currentTime.forEach(item => {\n          if (item.id === video.id && video.currentTime > 0) {\n            return (item.time = video.currentTime);\n          }\n        });\n      }\n      setIsPlay(false);\n    }\n  };\n\n  const scrollToVideo = () => {\n    const title = document.getElementById('lesson-title') as HTMLElement;\n    title?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <>\n      {lesson && (\n        <>\n          <TitleS id=\"lesson-title\">Lesson {lesson?.order}</TitleS>\n          <TextS>{lesson?.title}</TextS>\n          <ImageContainerS onTimeUpdate={getIsPlay}>\n            {lesson?.link && lesson?.duration ? (\n              <video\n                id={`${lesson?.link}`}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n              ></video>\n            ) : (\n              <img src={video_unavailable} alt=\"banner\" />\n            )}\n          </ImageContainerS>\n          <ScrollTopButton />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LessonPage;\n"],"names":["ButtonS","styled","_templateObject","_taggedTemplateLiteral","colors","secondary","_useState","useState","_useState2","_slicedToArray","visible","setVisible","window","addEventListener","scrolled","document","documentElement","scrollTop","_jsx","children","BsArrowUpSquareFill","onClick","scrollTo","top","behavior","style","display","ImageContainerS","TitleS","_templateObject2","TextS","_templateObject3","lesson","useContext","LessonContext","video","setVideo","_useState3","_JSON$parse","JSON","parse","localStorage","getItem","_useState4","currentTime","setCurrentTime","_useState5","_useState6","isPlay","setIsPlay","useEffect","Hls","isSupported","link","getElementById","concat","hls","loadSource","attachMedia","scrollToVideo","length","setItem","stringify","title","scrollIntoView","_Fragment","_jsxs","id","order","onTimeUpdate","paused","currentEl","find","item","time","forEach","_toConsumableArray","duration","width","height","controls","src","video_unavailable","alt","ScrollTopButton"],"sourceRoot":""}